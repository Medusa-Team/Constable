	tree	"fs" clone of file by getfile getfile.filename;
	primary tree "fs";
	tree	"domain" of process;

	space all_domains = recursive "domain";
	space all_files	= recursive "/" -
			  recursive "/home/roderik" -
			  recursive "/1/home";
	space home = recursive "/home/roderik" -
		     recursive "/home/roderik/1";
	space special = recursive "/home/roderik/1";
	space one = recursive "/1/home";

	all_domains     ENTER   all_domains,
			READ    all_domains, all_files,
			WRITE   all_domains, all_files,
			SEE     all_domains, all_files;

	all_domains	READ home, WRITE home, SEE home;

	function log
	{
		local printk buf.message=$1 + "\n";
		update buf;
	}

	* getipc {
		return OK;
	}

	all_domains mkdir home {
		log("mkdir");//" " + file.filename);
	}

	function log_proc {
		log ("" + $1 + " pid="+process.pid+" cmd='"+process.cmdline+"' domain="+primaryspace(process,@"domain")
			+" uid="+process.uid+" luid="+process.luid +" euid="+process.euid+" suid="+process.suid
			+" pcap="+process.pcap+" icap="+process.icap+" ecap="+process.ecap
			+" med_sact="+process.med_sact+" vs=["+spaces(process.vs)+"] vsr=["+spaces(process.vsr)+"] vsw=["+spaces(process.vsw)+"] vss=["+spaces(process.vss)+"]"
	//		+" sync-trace=["+process.syscall+"]"
		);
	}

	all_domains symlink all_files {
		log("symlink");
		return OK;
	}

	all_domains fork {
		log("fork: pid="+parent.pid+", cmd='"+parent.cmdline+"'");
		return OK;
	}

* getprocess {
	enter(process,@"domain/init");
        process.med_sact = 0x3fffffff;
	//log_proc("getprocess");
	return OK;
}

all_domains rename all_files {
    log_proc("allowed-rename['"+filename+"' --> '"+newname+"']");
    return ALLOW;
}

function enter_domain
{
	enter(process,str2path("domain/"+$1));
	log_proc("enter_domain");
}

all_domains mkdir all_files {
        log("mkdir");
        return OK;
}

all_domains rmdir all_files {
        log("rmdir");
        return OK;
}

* unlink home{
        log("unlink");
        return OK;
}

* create all_files {
	log("create: " + process.cmdline + " " + filename + " " + mode);
        return ALLOW;
}


* link all_files {
	log("link");
        return ALLOW;
}

* mknod all_files {
	log("mknod");
        return ALLOW;
}

* readlink all_files{
    log("readlink");
    return ALLOW;
//    if(process.uid == 0){
//    }else{   
//        return DENY;
//    }
}

* chmod all_files {
    log("chmod");
    return ALLOW;
}

* chown all_files {
    log("chown");
    return ALLOW;
}

function f_get {
        transparent fuck fuck;
        fuck.path = "/home/jano/asd.txt";
        fetch fuck;
        log("fuck '"+fuck.path+"' "+fuck.dev+"/"+fuck.ino);
}

function f_set {
        transparent fuck fuck;
        fuck.dev = 8388609;
        fuck.ino = 260163;

        fuck.action = "remove";
        fuck.path = "asd";
        update fuck;
        fuck.path = "asd2.txt";
        update fuck;
        fuck.path = "asd2.txt";
        update fuck;

        fuck.action = "append";
        fuck.path = "/home/jano/asd2.txt";
        update fuck;
}

function constable_init {
	enter(process,@"domain/init");
	log_proc("Constable started.");
        //f_get();
        //f_set();
}



function _init
{
}
// {
// 	transparent process process;
// 	process.pid=constable_pid();
// 	log("_init ja som: "+_comm());
// 	if( _comm() == "test" ) {
// 		if( fetch process ) {
// 			constable_init();
// 			update process;
// 		}
// 		else
// 			log("Can't initialize constable process");
// 	}
// }

