tree	"fs" clone of file by getfile getfile.filename;
primary tree "fs";
tree	"domain" of process;

space all_domains = recursive "domain";
space all_files	= recursive "/";

all_domains     ENTER   all_domains,
		READ    all_domains, all_files,
		WRITE   all_domains, all_files,
		SEE     all_domains, all_files;

function log
{
	local printk buf.message=$1 + "\n";
	update buf;
}

all_domains getipc {
	log("getipc ipc_class=" + ipc.ipc_class + " ipc.pid=" + ipc.pid);
	return ALLOW;
}

all_domains mkdir all_files {
	log("mkdir " + mkdir.filename + " mode=" + mkdir.mode);
	return ALLOW;
}

function log_proc {
	log ("" + $1 + " pid="+process.pid+" cmd='"+process.cmdline+"' domain="+primaryspace(process,@"domain")
		+" uid="+process.uid+" luid="+process.luid +" euid="+process.euid+" suid="+process.suid
		+" pcap="+process.pcap+" icap="+process.icap+" ecap="+process.ecap
		+" med_sact="+process.med_sact+" vs=["+spaces(process.vs)+"] vsr=["+spaces(process.vsr)+"] vsw=["+spaces(process.vsw)+"] vss=["+spaces(process.vss)+"]"
//		+" sync-trace=["+process.syscall+"]"
	);
}

all_domains symlink all_files {
	log("symlink " + symlink.filename + "->" + symlink.oldname);
	return ALLOW;
}

* getprocess * {
	enter(process,@"domain/init");
        process.med_sact = 0x3fffffff;
	log_proc("getprocess");
	return ALLOW;
}

all_domains rename all_files {
    log_proc("rename['"+filename+"' --> '"+newname+"']");
    return ALLOW;
}

all_domains truncate all_files {
    log_proc("truncate['"+filename+"']");
    return ALLOW;
}

function enter_domain
{
	enter(process, str2path("domain/" + $1));
	log_proc("enter_domain");
}

all_domains rmdir all_files {
        log("rmdir['" + rmdir.filename + "']");
        return ALLOW;
}

all_domains unlink all_files {
        log("unlink['" + unlink.filename + "']");
        return ALLOW;
}

all_domains create all_files {
	log("create " + create.filename + " mode=" + create.mode);
        return ALLOW;
}


all_domains link all_files {
	log("link " + link.newname + "->" + link.filename);
        return ALLOW;
}

all_domains mknod all_files {
	log("mknod filename=" + mknod.filename + " dev=" + mknod.dev + " mode=" + mknod.mode);
        return ALLOW;
}

all_domains chmod all_files {
	log("chmod filename=" + chmod.filename + " mode:" + chmod.mode);
        return ALLOW;
}

all_domains chown all_files {
	log("chown filename=" + chown.filename + " uid=" + chown.uid + " gid=" + chown.gid);
        return ALLOW;
}

all_domains readlink all_files{
    log("readlink " + readlink.filename);
    return ALLOW;
}

function f_get {
        transparent fuck fuck;
        fuck.path = "/home/jano/asd.txt";
        fetch fuck;
        log("fuck '"+fuck.path+"' "+fuck.dev+"/"+fuck.ino);
}

function f_set {
        transparent fuck fuck;
        fuck.dev = 8388609;
        fuck.ino = 260163;

        fuck.action = "remove";
        fuck.path = "asd";
        update fuck;
        fuck.path = "asd2.txt";
        update fuck;
        fuck.path = "asd2.txt";
        update fuck;

        fuck.action = "append";
        fuck.path = "/home/jano/asd2.txt";
        update fuck;
}

function constable_init {
	enter(process,@"domain/init");
	log_proc("Constable started.");
        // f_get();
        // f_set();
}



function _init {}
/*{
	transparent process process;
	process.pid=constable_pid();
	log("_init ja som: "+_comm());
	if( _comm() == "test" ) {
		if( fetch process ) {
			constable_init();
			update process;
		}
		else
			log("Can't initialize constable process");
	}
}*/
